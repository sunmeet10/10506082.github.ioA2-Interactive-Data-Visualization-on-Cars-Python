# -*- coding: utf-8 -*-
"""Cars.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LxXd3FphMzZQxaf5_4zFZD30uMs8nK0I
"""

import altair as alt

import io

import pandas as pd

from google.colab import files
uploaded = files.upload()

df2 = pd.read_excel(io.BytesIO(uploaded['data.xls']))

df2.head()

df2.info()

brush = alt.selection(type='interval', encodings=['x'])

points = alt.Chart(df2).mark_point().encode(
    x='Company',
    y='Retail Price',
    color = 'Type Of Vehicle'
).add_selection(
    brush
)

rule = alt.Chart(source).mark_rule(color='red').encode(
    y='mean(Dealer Cost)'
).transform_filter(
    brush
)


(points + rule)

source = df2
brush = alt.selection(type='interval', encodings=['x'])

bar = alt.Chart(source).mark_bar().encode(
    x='Vehicle Name',
    y='Retail Price'
).add_selection(
    brush
).transform_filter(
 "datum.Wagon == 1"
)

rule = alt.Chart(source).mark_rule(color='red').encode(
    y='mean(Dealer Cost)'
).transform_filter(
    brush
)

(bar + rule)

brush = alt.selection(type='interval', resolve='global')

base = alt.Chart(source).mark_point().encode(
    y='HP',
    color=alt.condition(brush, 'Engine Size (l)', alt.ColorValue('lightgray'))
).add_selection(
    brush
).properties(
    width=250,
    height=250
)

base.encode(x='City MPG') | base.encode(x='Hwy MPG')

slider = alt.binding_range(min=0, max=8, step=1)
select_weight = alt.selection_single(name='Len', fields=['Cyl'], bind=slider)

alt.Chart(df2).mark_line().encode(
    x='Vehicle Name',
    y='HP'
).add_selection(
    select_weight
).transform_filter(
    select_weight
)

from altair.expr import datum
source = df2

alt.Chart(source).mark_circle().encode(
    alt.X(alt.repeat("column"), type='quantitative'),
    alt.Y(alt.repeat("row"), type='quantitative'),
    color='Retail Price'
).properties(
    width=150,
    height=150
).repeat(
    row=['HP', 'Cyl', 'Engine Size (l)'],
    column=['Engine Size (l)', 'Cyl', 'HP']
)

from altair.expr import datum
import folium

map = folium.Map(location=[35.9078,127.7669])

folium.Marker(
    location=[35.9078,127.7669],
    popup= 'Hyundai,Kia',
    icon=folium.Icon(color='red')
).add_to(map)

folium.Marker(
    location=[36.2048, 138.2529],
    popup='Acura,Honda,Isuzu,Lexus,Mazda,Mitsubishi,Nissan,Subaru ,Suzuki,Toyota',
    icon=folium.Icon(color='green')
).add_to(map)

folium.Marker(
    location=[37.0902, 95.7129],
    popup='Buick,Cadillac,Chevrolet,Chrysler ,Dodge,Ford ,GMC,Hummer,Jeep,Lincoln,Oldsmobile,Pontiac,Scion',
    icon=folium.Icon(color='blue')
).add_to(map)

folium.Marker(
    location=[51.1657,10.4515],
    popup= 'Audi,BMW,Mercedes,Mercury,Porsche,Volkswagen',
    icon=folium.Icon(color='lightblue')
).add_to(map)

folium.Marker(
    location=[54.526,105.2551],
    popup= 'Infiniti,Saturn',
    icon=folium.Icon(color='pink')
).add_to(map)


folium.Marker(
    location=[55.3781,55.3781],
    popup= 'Land Rover',
    icon=folium.Icon(color='darkgreen')
).add_to(map)
    

folium.Marker(
    location=[60.1282,18.6435],
    popup= 'Saab,Volvo',
    icon=folium.Icon(color='purple')
).add_to(map)

folium.Marker(
    location=[52.618210,-1.6458206],
    popup= 'Jaguar,Mini Cooper',
    icon=folium.Icon(color='orange')
).add_to(map)



map

lon = df2['Long']

lat = df2['Lat']

interval = alt.selection_interval()

points = alt.Chart(df2).mark_point().encode(
  x='Retail Price',
  y='HP',
  color=alt.condition(interval, 'Company', alt.value('lightgray'))
).properties(
  selection=interval
)

histogram = alt.Chart(df2).mark_bar().encode(
  x='count()',
  y='Company',
  color='Company'
).transform_filter(interval)

points & histogram

input_dropdown = alt.binding_select(options=['Acura','BMW','Buick','Cadillac','Chevrolet','Dodge','GMC','Honda','Hummer','Hyundai','Infiniti','Isuzu','Jaguar','Jeep','Land Rover','Lexus','Lincoln',
'Mazda','Mercedes','Mini Cooper','Mitsubishi','Oldsmobile','Pontiac','Porsche','Saab','Saturn','Scion','Suzuki','Toyota','Volkswagen','Volvo'])
selection = alt.selection_single(fields=['Company'], bind=input_dropdown, name=' ')
color = alt.condition(selection,
                    alt.Color('Company:N', legend = None),
                    alt.value('lightgray'))

alt.Chart(df2).mark_bar().encode(
    x="Country",
    y="Retail Price",
    color=color
).properties(
  width = 1000
).add_selection(
    selection
).interactive()

input_dropdown = alt.binding_select(options=['Germany','Japan','USA','North America','South Korea', 'Sweden','UK'])
selection = alt.selection_single(fields=['Country'], bind=input_dropdown, name=' ')
color = alt.condition(selection,
                    alt.Color('Country:N', legend = None),
                    alt.value('lightgray'))

alt.Chart(df2).mark_bar().encode(
    x=alt.X('count()'),
    y='Type Of Vehicle',
    color=color
).properties(
  width = 1000
).add_selection(
    selection
).interactive()

brush = alt.selection(type='interval', encodings=['x'])

# Define the base chart, with the common parts of the
# background and highlights
base = alt.Chart().mark_bar().encode(
    x=alt.X(alt.repeat('column'), type='quantitative', bin=alt.Bin(maxbins=20)),
    y='count()'
).properties(
    width=200,
    height=200
).transform_filter(
  "datum.SUV == 1"
)

# blue background with selection
background = base.properties(selection=brush)

# yellow highlights on the transformed data
highlight = base.encode(
    color=alt.value('goldenrod')
).transform_filter(brush)

# layer the two charts & repeat
alt.layer(
    background,
    highlight,
    data=source
).transform_calculate(
    "time",
    "hours(datum.date)"
).repeat(column=["Cyl", "Engine Size (l)", "HP"])

pts = alt.selection(type="single", encodings=['x'])

rect = alt.Chart(df2).mark_rect().encode(
    alt.X('Retail Price:Q', bin=True),
    alt.Y('Dealer Cost:Q', bin=True),
    alt.Color('count()',
        scale=alt.Scale(scheme='greenblue'),
        legend=alt.Legend(title='Total Records')
    )
)

circ = rect.mark_point().encode(
    alt.ColorValue('grey'),
    alt.Size('count()',
        legend=alt.Legend(title='Records in Selection')
    )
).transform_filter(
    pts
)

bar = alt.Chart(df2).mark_bar().encode(
    x='Type Of Vehicle',
    y='count()',
    color=alt.condition(pts, alt.ColorValue("steelblue"), alt.ColorValue("grey"))
).properties(
    selection=pts,
    width=550,
    height=200
)

alt.vconcat(
    rect + circ,
    bar
).resolve_legend(
    color="independent",
    size="independent"
)

rect = alt.Chart(df2).mark_rect().encode(
    alt.X('Retail Price:Q', bin=True),
    alt.Y('Dealer Cost:Q', bin=True),
    alt.Color('count()',
        scale=alt.Scale(scheme='greenblue'),
        legend=alt.Legend(title='Total Records')
    )
)

pts = alt.selection(type="single", encodings=['x'])

circ = rect.mark_point().encode(
    alt.ColorValue('grey'),
    alt.Size('count()',
        legend=alt.Legend(title='Records in Selection')
    )
)


alt.vconcat(
    rect + circ
)

rect = alt.Chart(df2).mark_rect().encode(
    alt.X('Retail Price:Q', bin=True),
    alt.Y('Dealer Cost:Q', bin=True),
    alt.Color('count()',
        scale=alt.Scale(scheme='greenblue'),
        legend=alt.Legend(title='Total Records')
    )
)

pts = alt.selection(type="single", encodings=['x'])

circ = rect.mark_point().encode(
    alt.ColorValue('grey'),
    alt.Size('count()',
        legend=alt.Legend(title='Records in Selection')
    )
)

bar = alt.Chart(df2).mark_bar().encode(
    x='City MPG',
    y='Type Of Vehicle',
    color= 'HP'
).interactive()

alt.vconcat(
rect + circ , bar).resolve_legend(
    color="independent",
    size="independent"
)

selector = alt.selection_single(empty='all', fields=['Company'])

base = alt.Chart(df2).properties(
    width=250,
    height=250
).add_selection(selector)

points = base.mark_point(filled=True, size=200).encode(
    x='Wheel Base',
    y='Weight',
    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),
).interactive()

timeseries = base.mark_line().encode(
    x='Len',
    y='Width',
    color=alt.Color('id:O', legend=None)
).transform_filter(
    selector
)

points | timeseries

brush = alt.selection(type='interval')

alt.Chart(df2).mark_point().encode(
    x='HP:Q',
    y='City MPG:Q',
    color=alt.condition(brush, 'Cyl:O', alt.value('grey'))
).add_selection(brush)