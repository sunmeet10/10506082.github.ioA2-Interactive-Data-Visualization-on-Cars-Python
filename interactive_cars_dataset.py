# -*- coding: utf-8 -*-
"""Interactive Cars Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qn0Sd4zL3sgRNFKtelgrdFf0w_ePDshv
"""

import altair as alt
import numpy as np
import pandas as pd

#from google.colab import files
#uploaded = files.upload()

import io
df2 = pd.read_excel("https://raw.githubusercontent.com/sunmeet10/10506082.github.ioA2-Interactive-Data-Visualization-on-Cars-Python/master/04cars%20data.xls")

df2.head()
input_dropdown = alt.binding_select(options=list(set(df2.TypeOfVehicle)))
interval = alt.selection_multi(fields=['Company'])
brush = alt.selection(type='interval', resolve='global')
carName = alt.selection_single(fields=['VehicleName'])
carType = alt.selection_single(fields=['TypeOfVehicle'])
brush_tool = alt.selection(type='interval', encodings=['x'])
AWDselection = alt.selection_multi(fields=['AWD'])
RWDselection = alt.selection_multi(fields=['RWD'])

color1 = alt.condition(interval,
                      alt.Color('Company:N',legend=None),
                      alt.value('lightgray'))

color2 = alt.condition(brush,
                      alt.Color('Company:N',legend=None),
                      alt.value('lightgray'))

color3 = alt.condition(carName,
                      alt.Color('Company:N',legend=None),
                      alt.value('lightgray'))


color4 = alt.condition(carType,
                    alt.Color('Company:N', legend = None),
                    alt.value('lightgray'))


#####################

points = alt.Chart(df2).mark_point().encode(
  x='Retail_Price',
  y='HP',
  tooltip=['VehicleName','HP','Retail_Price'],
  color=color2
    #alt.condition(interval, 'Company', alt.value('lightgray'))
).add_selection(
    brush
).transform_filter(
    interval
).transform_filter(
    carType
).transform_filter(
    carName
).transform_filter(
    brush_tool
).transform_filter(
    AWDselection
).transform_filter(
    RWDselection
)


#####################

histogram = alt.Chart(df2).mark_bar().encode(
  x='Company',
  y='count()',
  tooltip=['Company','count()'],
  color=color1
).transform_filter(
    brush
).transform_filter(
    carName
).transform_filter(
    carType
).transform_filter(
    brush_tool
).transform_filter(
    AWDselection
).transform_filter(
    RWDselection
).properties(
  selection=interval
)

#####################

bar = alt.Chart(df2).mark_bar().encode(
    x="Country",
    y="Retail_Price",
    color=color3,
    tooltip=['VehicleName','Country','Retail_Price']
).properties(
  width = 800
).transform_filter(
    brush
).transform_filter(
    interval
).transform_filter(
    carType
).transform_filter(
    brush_tool
).transform_filter(
    AWDselection
).transform_filter(
    RWDselection
).add_selection(
    carName
)

#####################

carTypeBar = alt.Chart(df2).mark_bar().encode(
    x=alt.X('count()'),
    y='TypeOfVehicle',
    tooltip=[alt.X('count()'),'Country','TypeOfVehicle'] ,
    color=color4
).transform_filter(
    brush
).transform_filter(
    interval
).transform_filter(
    carName
).transform_filter(
    brush_tool
).add_selection(
  carType
).transform_filter(
    AWDselection
).transform_filter(
    RWDselection
).properties(
    width=700,
    height=300
)


#####################


# Define the base chart, with the common parts of the
# background and highlights
base = alt.Chart().mark_bar().encode(
    x=alt.X(alt.repeat('column'), type='quantitative', bin=alt.Bin(maxbins=20)),
    y='Retail_Price',
    tooltip=['Retail_Price']
).properties(
    width=200,
    height=200
)

# blue background with selection
background = base.properties(selection=brush_tool)

# yellow highlights on the transformed data
highlight = base.encode(
    color=alt.value('goldenrod')
).transform_filter(
    brush_tool
).transform_filter(
    brush
).transform_filter(
    interval
).transform_filter(
    carName
).transform_filter(
    carType
).transform_filter(
    AWDselection
).transform_filter(
    RWDselection
)

# layer the two charts & repeat
common_bar = alt.layer(
    background,
    highlight,
    data=df2
).repeat(column=["Cyl", "Engine_Size", "City_MPG","Hwy_MPG","Wheel_Base","Len","Weight","Width"])


################



awdPoint = alt.Chart(df2
).mark_point(filled=True,size=1500
).encode(
    y=alt.Y('AWD:O', axis=alt.Axis(orient='right', title='AWD')),
      color=alt.condition(AWDselection,
                        'AWD:N',
                        alt.value('lightgray'),
                         legend=None),
    tooltip=['AWD'],
    
).add_selection(
  AWDselection
).transform_filter(
    brush
).transform_filter(
    interval
).transform_filter(
    carType
).transform_filter(
    brush_tool
).transform_filter(
    carName
).transform_filter(
    RWDselection
).properties(
    width=100,
    height=150
)

################

rwdPoint = alt.Chart(df2
).mark_point(filled=True,size=1500
).encode(
    y=alt.Y('RWD:O', axis=alt.Axis(orient='right', title='RWD')),
      color=alt.condition(RWDselection,
                        'RWD:N',
                        alt.value('lightgray'),
                         legend=None),
    tooltip=['RWD'],
    
).add_selection(
  RWDselection
).transform_filter(
    brush
).transform_filter(
    interval
).transform_filter(
    carType
).transform_filter(
    brush_tool
).transform_filter(
    carName
).transform_filter(
    AWDselection
).properties(
    width=100,
    height=150
)


################

dashboard = (points | histogram | (awdPoint & rwdPoint)) & (bar | carTypeBar) & common_bar
dashboard

dashboard.save('dashboard.html')

from google.colab import files
files.download('dashboard.html')

################
